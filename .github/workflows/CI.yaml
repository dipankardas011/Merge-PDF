name: Golang and Docker CI

on:
  push:
    branches: [ main ]

jobs:
  golang_build:

    runs-on: ubuntu-latest
    environment: testing

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17

    - name: Build
      run: |
        cd src/backend/merger
        go build -v ./...

    - name: Test
      run: |
        cd src/backend/merger
        go test -v ./...

  npm_build:

    runs-on: ubuntu-latest
    environment: testing

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: installing dependencies
      run: |
        cd src/frontend
        npm install

    - name: testing
      env:
        PORT: 8080
      run: |
        cd src/frontend
        npm run test

  docker_build:

    needs: [golang_build,npm_build]

    runs-on: ubuntu-latest
    environment: testing

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: |
        cd src/backend/merger
        docker build . --target prod --file Dockerfile --tag pdf-editor:$(date +%s)
        cd ../../frontend
        docker build . --target prod --file Dockerfile --tag pdf-editor:$(date +%s)

  # docker_new_release:

  #   needs: [docker_build]

  #   runs-on: ubuntu-latest
  #   environment: preview
  #   env:
  #     SUPER_SECRET: ${{ secrets.DOCKER_PASS }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Publish the Docker image
  #     run: |
  #       docker login -u dipugodocker -p "$SUPER_SECRET"
  #       cd src/backend/merger
  #       docker build . --file Dockerfile --target prod --tag dipugodocker/pdf-editor:backend
  #       cd ../../frontend
  #       docker build . --file Dockerfile --target prod --tag dipugodocker/pdf-editor:frontend
  test_cosign_action:
    needs: [docker_build]

    runs-on: ubuntu-latest
    environment: preview

    env:
      SUPER_SECRET: ${{ secrets.DOCKER_PASS }}

    name: Install Cosign and test presence in path
    steps:
      - uses: actions/checkout@v3


      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        # with:
        #   cosign-release: main
      - name: Check Version
        run: |
          cosign version
          docker login -u dipugodocker -p "$SUPER_SECRET"

      - name: build backend
        run: |
          cd src/backend/merger
          docker build --target prod -t docker.io/dipugodocker/pdf-editor:backend .

      - name: build frontend
        run: |
          cd src/frontend
          docker build --target prod -t docker.io/dipugodocker/pdf-editor:frontend .

      - name: sign
        run: |
          echo -n "${{secrets.COSIGNPASSWORD}}" | cosign sign --key cosign.key -a git_sha=$GITHUB_SHA docker.io/dipugodocker/pdf-editor:frontend
          echo -n "${{secrets.COSIGNPASSWORD}}" | cosign sign --key cosign.key -a git_sha=$GITHUB_SHA docker.io/dipugodocker/pdf-editor:backend

      - name: verify
        run: |
          echo "Frontend Verify"
          cosign verify --key cosign.pub -a git_sha=$GITHUB_SHA docker.io/dipugodocker/pdf-editor:frontend | jq .
          echo "Backend Verify"
          cosign verify --key cosign.pub -a git_sha=$GITHUB_SHA docker.io/dipugodocker/pdf-editor:backend | jq .
          docker push docker.io/dipugodocker/pdf-editor:backend
          docker push docker.io/dipugodocker/pdf-editor:frontend

# docker build . --file Dockerfile --tag dipugodocker/pdf-editor:0.$(($(date +%m) + 1))-rc
# docker push dipugodocker/pdf-editor:0.$(($(date +%m) + 1))-rc
  # heroku-preview:
  #   needs: [docker_build]
  #   runs-on: ubuntu-latest
  #   environment: preview
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Login to Heroku Container registry
  #     env:
  #       HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #     run: heroku container:login
  #   - name: Build and push
  #     env:
  #       HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #     run: |
  #       cd backEnd/
  #       heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web
  #   - name: Release
  #     env:
  #       HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #     run: |
  #       cd backEnd/
  #       heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web